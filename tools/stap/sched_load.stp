#!/usr/bin/env stap

%{
#include <linux/sched.h>
#if defined(STAPCONF_LINUX_SCHED_HEADERS)
#include <linux/sched/loadavg.h>
#endif
%}

// TASK_RUNNING (0), TASK_INTERRUPTIBLE (1), TASK_UNINTERRUPTIBLE (2), TASK_STOPPED (4),
// TASK_TRACED (8), EXIT_ZOMBIE (16), or EXIT_DEAD (32).

global prev_pid_names, curr_pid_names
# $#参数个数，如果参数大于等于1，就是$1，否则是23
# global show_interval = %( $# >= 1 %? $1 %: 10 %)

probe begin {
    printf("start tap to sched load average...\n")
    if($# != 1 || $1 < 3) {
        # 参数合法性判断
        printf("Usage: ./sched_load_detail <interval>, !!interval must larger than 3s!!\n")
        exit()
    }
}

// fork后执行exec，获取新的进程名
probe kernel.trace("sched_process_exec")!,
      kprocess.exec_complete {
    tid = tid()
    if(tid in curr_pid_names) {
        // 更新进程名
        old_name = curr_pid_names[tid]
        curr_pid_names[tid] = execname()
        // printf("process tid:%d %s exec to %s\n", tid, old_name, execname())
    }
}

// 被唤醒，进入RUNNING状态, 进入runqueue
probe kernel.trace("sched_wakeup") {
    pid = task_pid($p)
    tid = task_tid($p)
    if(pid && !(tid in curr_pid_names)) {
        curr_pid_names[tid] = task_execname($p)
        // 获取ts状态
        // tss = task_state($p)
        // printf("pid:%d tid:%d '%s' wakeup, state:%d\n", pid, tid, task_execname($p), tss)
    }
}

probe kernel.trace("sched_switch") {
    pid = task_pid($prev)
    tid = task_tid($prev)
    if(pid && (tid in curr_pid_names)) {
        state = task_state($prev)
        // 保留出切换后是TASK_UNINTERRUPTIBLE和RUNNING的ts
        if(state != 2 || state != 0) {
            delete curr_pid_names[tid]
        }
    }
}

// 进程退出
probe kernel.trace("sched_process_exit")
{
    tid = task_tid($p)
    if(tid in curr_pid_names) {
        delete curr_pid_names[tid]
    }
}

probe timer.s($1) {
    printf("%s loadavg ===>%s", ctime(), sprint_loadavg())
    foreach(tid+ in curr_pid_names) {
        printf("tid:%d, name:%s\n", tid, curr_pid_names[tid])
    }
    delete curr_pid_names
}

probe end {
    printf("exit tap to sched load average...\n")
    delete curr_pid_names
}