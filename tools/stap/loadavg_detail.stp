#! /usr/bin/env stap


# 2024年12月4日 10:19:04
# 1：按插入顺序来显示ts信息
# 2：加入nr_active阈值，以此判断更为敏感
# 3：加入D状态ts的堆栈打印

# 2024年12月5日 15:40:31
# 1：加入对slowpath的支持

%{
#include <linux/sched.h>
#include <linux/sched/debug.h>
#if defined(STAPCONF_LINUX_SCHED_HEADERS)
#include <linux/sched/loadavg.h>
#endif
%}

# sar -qz 1 10000
# ps -eo ppid,pid,user,stat,pcpu,comm,wchan:32 | grep " D"

# TASK_RUNNING (0), TASK_INTERRUPTIBLE (1), TASK_UNINTERRUPTIBLE (2), TASK_STOPPED (4),
# TASK_TRACED (8), EXIT_ZOMBIE (16), or EXIT_DEAD (32).
global pid_names
global curr_r_tids, curr_d_tids
global curr_r_count, curr_d_count
global prev_load_avg_1, prev_nr_active
global mutex_d_tids, sem_d_tids, bio_d_tids

# 输入参数
global loadavg_delta = %( $# == 3 %? $1 %: 2 %)
global nr_active_delta = %( $# == 3 %? $2 %: 10 %)
global show_interval = %( $# == 3 %? $3 %: 5 %)

function usage() {
    printf("loadavg_delta:%d, nr_active_delta:%d, show_interval:%d\n",
        loadavg_delta, nr_active_delta, show_interval)

    printf("Usage: ./loadavg_detail <loadavg_delta> <nr_active_delta> <interval>\n")
    printf("    loadavg_delta: load average increase delta, >= 1\n")
    printf("    nr_active_delta: active delta, >= 5\n")
    printf("    interval: show interval, >= 3\n")
    exit()
}

probe init {
    if(loadavg_delta < 1 || nr_active_delta < 5|| show_interval < 3 ) {
        usage()
    }
}

probe begin {
    printf("start tap to load average detail...\n")
    prev_load_avg_1 = get_loadavg_index(0)
    prev_nr_active = -1
    curr_r_count = 0
    curr_d_count = 0
}

function num_online_cpus:long() %{
    STAP_RETVALUE = num_online_cpus();
%}

function dump_mutex_owner:long(ts:long) %{  /* guru */
    struct task_struct *__ts = (struct task_struct *)((long)STAP_ARG_ts);
    if(__ts != 0) {
        rcu_read_lock();
        sched_show_task(__ts);
        rcu_read_unlock();
    }
    STAP_RETVALUE = 0;
%}

function dump_mutex_info:string(mutex:long) {
    str = ""
    // 得到mutex的owner，task_struct对象的地址
    mutex_owner = @cast(mutex, "mutex", "kernel<linux/mutex.h>")->owner->counter
    if(mutex_owner) {
        str = sprintf("mutex:%x owner pid:%d, comm:'%s'\n", mutex, task_pid(mutex_owner), task_execname(mutex_owner))
        // 打印mutex的owner的堆栈到dmesg中
        dump_mutex_owner(mutex_owner)
    }
    return str
}

# __mutex_lock_slowpath --->
# __mutex_lock(lock, TASK_UNINTERRUPTIBLE, 0, NULL, _RET_IP_) --->
# __mutex_lock_common(lock, state, subclass, nest_lock, ip, NULL, false)
# 判断调用堆栈中是否有__mutex_lock_slowpath
probe kernel.function("__mutex_add_waiter") {
    // **这里无法判断tid状态是不是TASK_UNINTERRUPTIBLE，只能在sched_switch中判断
    tid = tid()
    // callers = callers(-1) #这个只会返回调用的地址，调用的地址
    if(tid in curr_r_tids) {
        // 当前执行的进程被加入到mutex的等待队列
        // 是否是TASK_UNINTERRUPTIBLE状态需要在sched_switch来判断，这里先保存起来
        mutex_d_tids[tid] = $lock
        printf("pid:%d is added to the waiter list because of the mutex:%x\n",
            tid, mutex)
    }
}

probe kernel.trace("sched_switch") {
    pid = task_pid($prev)
    tid = task_tid($prev)
    if(pid && (tid in curr_r_tids)) {
        // 得到切换出ts的状态
        state = task_state($prev)

        // if(isinstr(pid_names[tid], "touch")) {
        //     printf("sched_switch prev pid:%d, tid:%d, name:'%s', state:%d\n", pid, tid, pid_names[tid], state)
        // }

        if((state & 0x0002) && !(state & 0x0400)) {
            // 从运行状态呢变为uninterrupted状态，记录其堆栈信息
            curr_d_tids[tid] = backtrace()//sprint_backtrace()
            curr_d_count++
            // 从r队列中删除
            curr_r_count--
            delete curr_r_tids[tid]
        } else {
            // 非TASK_UNINTERRUPTIBLE状态的tid，都从in_slowpath_pids中删除
            delete mutex_d_tids[tid]

            if(state != 0) {
                // 非R和D状态
                delete curr_r_tids[tid]
                curr_r_count--
            }
        }
    }
}

// fork后执行exec，获取新的进程名
probe kernel.trace("sched_process_exec")!,
      kprocess.exec_complete {
    tid = tid()
    if(tid in pid_names) {
        // 更新进程名
        old_name = pid_names[tid]
        pid_names[tid] = execname()
    }
}

// 被唤醒，进入RUNNING状态, 进入runqueue
probe kernel.trace("sched_wakeup") {
    pid = task_pid($p)
    tid = task_tid($p)
    if(pid && !(tid in curr_r_tids)) {
        // 加入当前运行队列
        curr_r_tids[tid] = 1
        curr_r_count++
        // 获得程序名
        pid_names[tid] = task_execname($p)
        // if(isinstr(pid_names[tid], "touch")) {
        //     printf("sched_wakeup pid:%d, tid:%d, name:'%s'\n", pid, tid, pid_names[tid])
        // }
    }

    // 被唤醒的tid都应该从d状态表和slowpath表中删除
    if(tid in curr_d_tids) {
        delete curr_d_tids[tid]
        curr_d_count--
    }

    if(tid in mutex_d_tids) {
        delete mutex_d_tids[tid]
    }
}

// 进程退出，从记录中删除
probe kernel.trace("sched_process_exit")
{
    tid = task_tid($p)

    // if(isinstr(pid_names[tid], "touch")) {
    //     printf("sched_process_exit pid:%d, tid:%d, name:'%s'\n", pid, tid, pid_names[tid])
    // }

    if(tid in pid_names) {
        delete pid_names[tid]
    }
    if(tid in curr_d_tids) {
        curr_d_count--
        delete curr_d_tids[tid]
    }
    if(tid in curr_r_tids) {
        curr_r_count--
        delete curr_r_tids[tid]
    }
    if(tid in mutex_d_tids) {
        delete mutex_d_tids[tid]
    }
}

probe timer.s($3) {
    printf("<<<%s, cpus:%d,'R':%d,'D':%d, prev_nr_active:%d, loadavg:%s",
        ctime(), num_online_cpus(), curr_r_count, curr_d_count, prev_nr_active, sprint_loadavg())
    // 得到1分钟的load average
    curr_load_avg_1 = get_loadavg_index(0)
    // 当前活跃进程数
    curr_nr_active = curr_r_count + curr_d_count

    if((curr_load_avg_1 - prev_load_avg_1) >= loadavg_delta ||
        (prev_nr_active != -1 && (curr_nr_active - prev_nr_active) >= nr_active_delta)) {

        printf("Curr 'D' ts:")
        // 按插入顺序
        foreach(tid in curr_d_tids limit 30) {

            if(tid in mutex_d_tids) {
                printf("{tid:%d,name:'%s',wait in mutex:%x} \n%s\n",
                    tid, pid_names[tid], print_syms(curr_d_tids[tid]))

                dump_mutex_info(mutex_d_tids[tid])
            } else if (tid in sem_d_tids) {

            } else if (tid in bio_d_tids) {

            } else {
                printf("{tid:%d,name:'%s',wait in unknown} \n%s\n",
                    tid, pid_names[tid], print_syms(curr_d_tids[tid]))
            }
        }
    }
    printf(">>>\n")

    prev_load_avg_1 = curr_load_avg_1
    prev_nr_active = curr_nr_active
}

probe end {
    delete pid_names
    delete curr_r_tids
    delete curr_d_tids
    delete mutex_d_tids
    printf("exit tap to sched load average...\n")
}