#!/usr/bin/env stap

%{
#include <linux/version.h>
#include <net/sock.h>
#include <net/tcp.h>
#include <net/ip.h>
#include <linux/skbuff.h>
#include <linux/socket.h>
%}

global destIPMap
global destPort = 553
global filter_dev = "ens160"
global dns_skb_map

probe begin {
    print ("Transmit Tracing... Hit Ctrl-C to end.\n")
    //printf("addr_le:%d\n", addr_to_le("127.0.0.1"))
    n = addr_to_le("127.0.0.1")
    destIPMap[n] = 1
    n = addr_to_le("8.8.8.8")
    destIPMap[n] = 1
}

probe end {
    print ("Transmit tracing Complete\n")
}

function addr_to_le:long(addr:string)
{
    oct1 = strtol(tokenize(addr, "."), 10)
    oct2 = strtol(tokenize("", "."), 10)
    oct3 = strtol(tokenize("", "."), 10)
    oct4 = strtol(tokenize("", "."), 10)
    printf("oct1:%d, oct2:%d, oct3:%d, oct4:%d\n", oct1, oct2, oct3, oct4)
    return (oct4 << 24) | (oct3 << 16) | (oct2 << 8) | oct1
}

probe kernel.trace("net_dev_start_xmit")
{
    ipproto_tcp = @const("IPPROTO_TCP")
    ipproto_udp = @const("IPPROTO_UDP")
    ethproto_ip = @const("ETH_P_IP")

    try{ dev_name = get_netdev_name($skb->dev) } catch { dev_name = "unknown" }
    try{ length = $skb->len } catch { length = 0 }
    // 链路层协议
    try{ link_proto = ntohs($skb->protocol)  } catch { link_proto = 0 }

	try {
           iphdr = __get_skb_iphdr($skb)
           //saddr = format_ipaddr(__ip_skb_saddr(iphdr), @const("AF_INET"))
           daddr = format_ipaddr(__ip_skb_daddr(iphdr), @const("AF_INET"))
           // ip层协议类型
           ip_proto = __ip_skb_proto(iphdr)

           if(ip_proto == ipproto_udp) {
                // udp dns查询
                udphdr = & @cast(__get_skb_tcphdr($skb), "udphdr", "kernel<linux/udp.h>")
                dport = ntohs(udphdr->dest)
                // 源端口非常重要，标识了一次域名解析的请求
                sport = ntohs(udphdr->source)
                daddr_le = __ip_skb_daddr(iphdr)
                if(daddr_le in destIPMap) {
                    printf("%s, net_dev_start_xmit, dev_name:%s, skb:%p length:%d, link_proto:0x%04x, sport:%d, daddr_le:%d, dest:'%s:%d'\n", ctime(gettimeofday_s()),
                        dev_name, $skb, length, link_proto, sport, daddr_le, daddr, dport)
                    dns_skb_map[$skb] = 1
                }
           }
	} catch { }
}

probe kernel.trace("net_dev_xmit")
{
    if($skb in dns_skb_map) {
        printf("%s, net_dev_xmit, rc:%d\n", ctime(gettimeofday_s()), $rc)
    }
}

probe kernel.function("napi_consume_skb")
{
    if($skb in dns_skb_map) {
        printf("%s, consume_skb, skb:%p, budget:%d, caller:%s\n", ctime(gettimeofday_s()), $skb, $budget, caller())
        delete dns_skb_map[$skb]
    }
}

probe kernel.trace("consume_skb")
{
    if($skb in dns_skb_map) {
        link_proto = ntohs($skb->protocol)
        iphdr = __get_skb_iphdr($skb)
        daddr = format_ipaddr(__ip_skb_daddr(iphdr), @const("AF_INET"))
        udphdr = & @cast(__get_skb_tcphdr($skb), "udphdr", "kernel<linux/udp.h>")
        dport = ntohs(udphdr->dest)
        printf("%s, consume_skb, skb:%p, length:%d, link_proto:0x%04x, dest:'%s:%d'\n", ctime(gettimeofday_s()), $skb, $skb->len, link_proto, daddr, dport)

        // link_proto = ntohs($skb->protocol)
        // printf("%s, consume_skb, dev_name:%s, skb:%p length:%d, link_proto:0x%04x\n", ctime(gettimeofday_s()),
        //     dev_name, $skb, length, link_proto)
        // iphdr = __get_skb_iphdr($skb)
        // daddr = format_ipaddr(__ip_skb_daddr(iphdr), @const("AF_INET"))
        // ip_proto = __ip_skb_proto(iphdr)
        // udphdr = & @cast(__get_skb_tcphdr($skb), "udphdr", "kernel<linux/udp.h>")
        // dport = ntohs(udphdr->dest)
        // printf("%s, consume_skb, dev_name:%s, skb:%p length:%d, link_proto:0x%04x, ip_proto:%d, dest:'%s:%d'\n", ctime(gettimeofday_s()),
        //     dev_name, $skb, length, link_proto, ip_proto, daddr, dport)
        print_backtrace()
        delete dns_skb_map[$skb]
    }
}



