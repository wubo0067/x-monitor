#!/usr/bin/env stap

/*
功能说明：
1：统计套接字全连接队列长度，全连接队列最大长度，半链接队列长度
2：可按pid过滤
3：每秒输出process accept的次数
*/

%{
#include <linux/version.h>
#include <net/sock.h>
#include <net/tcp.h>
#include <net/ip.h>
#include <linux/skbuff.h>
#include <linux/socket.h>
%}


global target_pid = 0
global full_conn_queue
global half_conn_queue

probe begin {
    print ("Sock Accept Tracing... Hit Ctrl-C to end.\n")
    printf("%s, input argc:%d\n", ctime(), $#)
    if($# != 2) {
        printf("Usage: sock_accept.stp [target_pid] [interval_secs]\n")
        exit()
    }
    target_pid = $1
    report_interval_secs = $2
    printf("%s, target_pid:%d, report_interval_secs:%d\n", ctime(), target_pid, report_interval_secs)
}

probe end {
    print ("Sock Accept Complete\n")
}

/* return the TCP destination port for a given sock */
function __tcp_sock_dport:long (sock:long)
{
    port = @choose_defined(@inet_sock_cast(sock)->sk->__sk_common->skc_dport, # kernel >= 3.8
            @choose_defined(@inet_sock_cast(sock)->inet_dport, # kernel >= 2.6.33
            @choose_defined(@inet_sock_cast(sock)->dport, # kernel >= 2.6.11
                            @inet_sock_cast(sock)->inet->dport)))
    return ntohs(port)
}

function __make_session_info:string(saddr:string, sport:long, daddr:string, dport:long)
{
    info = sprintf("source[%s:%d], dest[%s:%d]", saddr, sport, daddr, dport)
    return info
}

/*

inet_csk_accept 是 Linux 内核中用于处理 TCP 连接的函数。它主要用于从已经完成三次握手的队列中取出一个连接控制块（control block），并返回给调用者
 ✘ ⚡ root@localhost  /home/calmwu/Program/x-monitor/tools/stap/net  stap -L 'kernel.function("inet_csk_accept")'
kernel.function("inet_csk_accept@net/ipv4/inet_connection_sock.c:455") $sk:struct sock* $flags:int $err:int* $kern:bool

 ✘ ⚡ root@localhost  /home/calmwu/Program/x-monitor/tools/stap/net  sysctl -a|grep soma
net.core.somaxconn = 128

net.ipv4.tcp_max_syn_backlog = 512
*/
probe kernel.function("inet_csk_accept").return {
    // 套接字，stap中dereference使用->
    cur_pid = pid()
    sock = $return
    if(sock != 0) {
        family  = __ip_sock_family(sock)
        saddr = format_ipaddr(__ip_sock_saddr(sock), family)
        daddr = format_ipaddr(__ip_sock_daddr(sock), family)
        sport = __tcp_sock_sport(sock)
        dport = __tcp_sock_dport(sock)
        session_info = __make_session_info(saddr, sport, daddr, dport)
        bl_len = @cast(sock, "struct sock")->sk_ack_backlog
        bl_max = @cast(sock, "struct sock")->sk_max_ack_backlog
        reqsk_queue_len = @cast(sock, "struct inet_connection_sock")->icsk_accept_queue->qlen->counter
        max_syn_backlog = @var("init_net@net/core/net_namespace.c")->ipv4->sysctl_max_syn_backlog
        // family = AF_INET
        if(family == 2) {
            if(target_pid != 0) {
                if(target_pid == cur_pid) {
                    // 形成一个数组
                    full_conn_queue[cur_pid, execname(), bl_max, max_syn_backlog] <<< bl_len
                    half_conn_queue[cur_pid, execname(), bl_max, max_syn_backlog] <<< reqsk_queue_len
                    printf("%s, pid:%d, execname:%s, family:%d, accept session:%s\n", ctime(gettimeofday_s()), cur_pid, execname(), family, session_info)
                }
            } else {
                full_conn_queue[cur_pid, execname(), bl_max, max_syn_backlog] <<< bl_len
                half_conn_queue[cur_pid, execname(), bl_max, max_syn_backlog] <<< reqsk_queue_len
                printf("%s, pid:%d, execname:%s, family:%d, accept session:%s\n", ctime(gettimeofday_s()), cur_pid, execname(), family, session_info)
            }
        }
    }
    //print_backtrace()
}

probe timer.s($2) {
    printf("%s>>>>>>\n", ctime(gettimeofday_s()))
    foreach([pid, name, bl_max, max_syn_backlog] in full_conn_queue) {
        printf("\tpid:%d, execname:%s, accepts:%d, full_conn_que(min:%d,avg:%d,max:%d,limit:%d) half_conn_queue(max:%d,limit:%d) in (%d)secs\n",
            pid, name,
            @count(full_conn_queue[pid, name, bl_max, max_syn_backlog]),
            @min(full_conn_queue[pid, name, bl_max, max_syn_backlog]),
            @avg(full_conn_queue[pid, name, bl_max, max_syn_backlog]),
            @max(full_conn_queue[pid, name, bl_max, max_syn_backlog]),
            bl_max, @max(half_conn_queue[pid, name, bl_max, max_syn_backlog]),
            max_syn_backlog,
            $2)
    }
    printf("<<<<<<\n")
    delete full_conn_queue
    delete half_conn_queue
}