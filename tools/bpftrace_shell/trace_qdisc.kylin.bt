#!/usr/bin/env bpftrace

/*
 * @Author: CALM.WU
 * @Date: 2025-04-07 17:39:35
 * @Last Modified by: CALM.WU
 * @Last Modified time: 2025-04-07 18:21:00
 */

#include <net/sch_generic.h>

BEGIN {
    printf("Tracing device qdisc... Hit Ctrl-C to end.\n");
}

kprobe:qdisc_graft {
    $qdisc_old = (struct Qdisc*)(reg("sp") + 8);

    $qdisc_parent = (struct Qdisc*)arg1;

    if($qdisc_parent == 0) {
        printf("qdisc graft parent is null\n");
    } else {
        printf("qdisc graft parent id:'%s'\n", $qdisc_parent->ops->id);
    }

    printf("dev:'%s',num_tx_queues:%d,qdisc.id:'%s'\n",
    ((struct net_device*)arg0)->name,
    ((struct net_device*)arg0)->num_tx_queues,
    ((struct Qdisc*)arg5)->ops->id);

    if ($qdisc_old != 0) {
        printf("old qdisc.id:'%s', flags:0x%x\n", $qdisc_old->ops->id, $qdisc_old->flags);
    }
}

kprobe:dev_graft_qdisc {
    $qdisc = (struct Qdisc*)arg1;
    $dev_queue = (struct netdev_queue*)arg1;

    printf("id:'%s', new qdisc.id:'%s', qdisc.addr:'%p'\n",
        $dev_queue->qdisc_sleeping->ops->id, $qdisc->ops->id, $qdisc);
}

// 统计按队列id统计入队数量
tracepoint:net:net_dev_queue {
    $skb = (struct sk_buff*)(args->skbaddr);
    $dev = $skb->dev;
    $dev_name = $dev->name;
    // 这里用uint32，就crash了
    $queue_index = (uint64)($skb->queue_mapping);
    //printf("dev:'%s', real_num_tx_queues:'%d', queue_index:%d\n", $dev_name, $dev->real_num_tx_queues, $queue_index);
    @net_dev_queue_count = count();
    if($dev->_tx != 0)
    {
        $netdev_queue = (struct netdev_queue *)(((uint64)$dev->_tx) + $queue_index*sizeof(struct netdev_queue));
        if($netdev_queue != 0) {

            $qdisc = $netdev_queue->qdisc;
            if($qdisc != 0 && $qdisc->enqueue != 0) {
                // skb priority:'2', qdisc handle:'65536'
                //printf("skb priority:'%u', qdisc handle:'%u'\n",
                //    $skb->priority, $qdisc->handle);
                // 判断qdisc是不是同一个
                //[设备，硬件发送队列索引，软件队列，qdisc父节点，qdisc类型，tid]
                /*
                @netdev_queue_in_pkg_count[$dev_name, $queue_index, $qdisc, $qdisc->parent, $qdisc->ops->id] = count();
                @netdev_queue_in_byt_size[$dev_name, $queue_index, $qdisc, $qdisc->parent, $qdisc->ops->id] = sum($skb->len);
                */

                @enqueue_skb_total_count[$dev_name, $qdisc, $qdisc->ops->id] = count();
                @enqueue_skb_total_bytes[$dev_name, $qdisc, $qdisc->ops->id] = sum($skb->len);
                if(@skb_tracing[$skb] == 0) {
                    // 记录skb入队时间
                    @skb_tracing[$skb] = nsecs;
                    // 统计skb长度的分布，和gso有关
                    @skb_len[$dev_name] = hist($skb->len);
                    // 按cpu统计入队数量
                    //@cpu_in_qdisc[cpu] = count();
                }
            }
        }
    }
}

tracepoint:qdisc:qdisc_dequeue {
    $skb = (struct sk_buff*)(args->skbaddr);
    $qdisc = args->qdisc;
    if($skb != 0) {
        // 只有skb不为null，才表明出队成功
        $queue_index = $skb->queue_mapping;
        $packets = (uint64)(args->packets);
        if($packets == 0) {
            $packets = 1;
        }
        $dev = $skb->dev;
        $dev_name = $dev->name;
        $skb_len = $skb->len;
        $qdisc_pkt_len = ((struct qdisc_skb_cb*)($skb->cb))->pkt_len;

        /*
        if($skb_len != $qdisc_pkt_len) {
        // skb len:'11734', qdisc pkt_len:'12112'
            printf("skb len:'%d', qdisc pkt_len:'%d'\n", $skb->len,
                ((struct qdisc_skb_cb*)($skb->cb))->pkt_len);
        }

        @netdev_queue_out_pkg_count[$dev_name, $queue_index, $qdisc] = sum($packets);
        @netdev_queue_out_byt_size[$dev_name, $queue_index, $qdisc] = sum($skb->len);
        */
        @dequeue_skb_total_count[$dev_name, $qdisc, $qdisc->ops->id] = sum($packets);
        @dequeue_skb_total_bytes[$dev_name, $qdisc, $qdisc->ops->id] = sum($skb->len);

        if(@skb_tracing[$skb]) {
            @skb_in_qdisc_usecs[$dev_name] = hist((nsecs - @skb_tracing[$skb]) / 1000);
            //delete(@skb_tracing[$skb]);
            //@cpu_out_qdisc[cpu] = count();
        }
    }
}

tracepoint:net:net_dev_start_xmit {
    $skb = (struct sk_buff*)(args->skbaddr);
    if($skb != 0) {
        $dev = $skb->dev;
        $dev_name = $dev->name;
        @dev_xmit_skb_total_count[$dev_name] = count();
        if(@skb_tracing[$skb]) {
            delete(@skb_tracing[$skb]);
        }
    }
}

tracepoint:net:net_dev_xmit {
    $rc = args->rc;
    @dev_xmit_rc[$rc] = count();
}

interval:s:3 {
    time("%H:%M:%S: \n" );
    //print(@netdev_queue_in_pkg_count);
    //print(@netdev_queue_out_pkg_count);
    //print(@netdev_queue_in_byt_size);
    //print(@netdev_queue_out_byt_size);

    print(@net_dev_queue_count);

    print(@enqueue_skb_total_count);
    print(@enqueue_skb_total_bytes);
    print(@dequeue_skb_total_count);
    print(@dequeue_skb_total_bytes);

    print(@dev_xmit_skb_total_count);
    print(@dev_xmit_rc);

    print(@skb_in_qdisc_usecs);
    print(@skb_len);
    //print(@cpu_in_qdisc);
    //print(@cpu_out_qdisc);

    //clear(@netdev_queue_in_pkg_count);
    //clear(@netdev_queue_out_pkg_count);
    //clear(@netdev_queue_in_byt_size);
    //clear(@netdev_queue_out_byt_size);

    clear(@net_dev_queue_count);

    clear(@enqueue_skb_total_count);
    clear(@enqueue_skb_total_bytes);
    clear(@dequeue_skb_total_count);
    clear(@dequeue_skb_total_bytes);

    clear(@dev_xmit_skb_total_count);
    clear(@dev_xmit_rc);

    clear(@skb_in_qdisc_usecs);
    clear(@skb_len);
    //clear(@cpu_in_qdisc);
    //clear(@cpu_out_qdisc);
}

END {
    //clear(@skb_tracing);
    printf("Detaching...\n");
}